extends ../layout

block content
    include ../header
    .content-wrap.clearfix(scroll-spy)
        .jumbotron.system-header
            h2 博客
            .clearfix: p.pull-right 这是一个可以随心所欲编写博客的地方。
        .system-bar.list-group.fixed-left
            a.list-group-item.arrow(spy='system') 系统简介
            a.list-group-item.arrow(spy='copyright') 版权申明
            a.list-group-item.arrow(spy='contact') 联系方式
            a.list-group-item.arrow(spy='markdown') Markdown使用说明
        .system-content.pull-right

            h3(id='system') 系统简介
            p “博客”有较深的涵义：“博”为“广博”；“客”不单是“blogger”更有“好客”之意。看Blog的人都是“客”。而在台湾，则分别音译成“部落格”（或“部落阁”）及“部落客”，认为Blog本身有社群群组的意含在内，借由Blog可以将网络上网友集结成一个大博客，成为另一个具有影响力的自由媒体。
            p 本站定位于企业和 开发者的基础需求，拥有知识服务和开发服务两大服务体系，帮助企业、团队 及个人实现产品与技术的突破与提升。
            p 知识服务：依托本站社区博客、知识库、下载、学院等资源扩大并加速知识和信息的传播，为用户提供技术订阅、培训等知识和信息共享服务。同时，通过多样化的市场推广手段进行信息精确推送，为企业推广品牌及产品。数千家企业已成功利用本站平台输出品牌，获得良好用户反馈及商业机会。
            p 开发服务：本站致力于为个人、团队及企业提供软件工程、IT管理以及数据分析过程中所需的工具产品及专业服务。本站研发全生命周期解决方案，通过提供高效率、高质量、高可靠性的企业级研发管理工具及服务，满足企业软件开发过程中全流程、全方位跟踪和综合管理的需求，提升研发团队交付能力，提高软件质量，帮助企业快速适应市场变化，支撑业务创新。
            h3(id='copyright') 版权申明
            p 本网站及相应客户端、自媒体平台、其他主运营网站等是IT技术社区，面向IT专业技术人员，提供专业化、集成化的服务。本版权与免责声明系为保障系统的正常经营、保护用户的合法权益而设定，其初衷是为了向用户提供不间断的优质服务。本网站一向尊重他人的知识产权，同时也注意保护自己的知识产权，因此建议您在接受本站服务之前，请务必仔细阅读本声明。
            p 1、 本站要求并依照合理信赖原则相信用户对所有在传输的文章、文档、图片、源代码等内容（以下统称“作品”）具有所有权、知识产权或已经事先征得原作者同意取得发布、传播作品所需的一切授权，并需注明原作者姓名和作品来源；由于用户不具备完整所有权、知识产权或未获得合法授权而发生的侵权或违法行为，将由用户承担侵权或违法行为的法律责任，本站不承担任何法律责任。
            p 2、 用户通过本站社区、博客、下载、学院、移动APP、新媒体矩阵等频道上传及发布的所有作品，均视为用户同意本站经营者拥有对其分享作品的商业合作与利用的权利。
            p 3、 用户上传到本站的作品仅代表作者或用户个人的观点和立场，与本站无任何关联，因用户行为或用户上传、存储、发布、传播的任何作品、信息、内容等引发的任何争议，或由此产生的任何直接、间接、偶然、特殊的损害，均由用户自行承担法律责任，本站经营者不承担任何责任；如用户行为对本站造成损失或不良影响，本站经营者保留追究相关用户法律责任的权利。
            p 4、 本站无法对用户传输的作品、信息、内容的权属或合法性、合规性、真实性、科学性、完整权、有效性等进行实质审查；无论本站经营者是否已进行审查，用户均应自行承担因其传输的作品、信息、内容而可能或已经产生的侵权或权属纠纷等法律责任。同时，本站经营者如认为用户发布的作品涉嫌侵权、违法，或其他用户或第三方就用户发布的作品提出权利主张或异议并提供初步依据，本站有权不经通知用户而采取删除内容、断开链接、屏蔽或通知上传用户予以纠正、暂停账户使用等措施，用户不得阻止或拒绝，本站不因此向用户承担任何责任，无论司法机关最终是否认定该等作品或内容构成侵权、违法或损害第三方利益。
            p 5、 本站的所有权、相关知识产权及运营权均属于本站经营者所有，本站发表的作品的知识产权及所有权为本站或其提供者所有。
            p 6、 凡本站上的所有作品，任何媒体、网站、个人或其他主体未经本站经营者及作品发布用户（发布用户为作品使用权人的，还须经作品知识产权权利人同意，除非作品知识产权权利人已授权发布用户转授权或转许可第三方使用）书面授权，不得下载、转载、链接、转帖或以其他方式复制、使用，如有需要，请与本站经营者联系相关事宜。本站经营者保留追究违反上述规定相关主体的法律责任的权利。
            h3(id='contact') 联系方式
            address
                p 联系电话：15870608093
                p Email：15870608093@163.com
                p QQ：1696732332
                p 地址：江西省南昌市青山湖区双港东大街808号 华东交通大学南区
                p 邮编：330013

            h3(id='markdown') Markdown使用说明
            h4  概述
            h5 宗旨
            p Markdown 的目标是实现「易读易写」。
            p 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。
            p 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样
            h5 兼容HTML
            p Markdown 语法的目标是：成为一种适用于网络的书写语言。
            p Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。
            p 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。
            p 要制约的只有一些 HTML 区块元素――比如 &lt;div>、&lt;table>、&lt;pre>、&lt;p> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;p> 标签。
            p 例子如下，在 Markdown 文件里加上一段 HTML 表格：
            pre.
                这是一个普通段落。

                &lt;table>
                    &lt;tr>
                        &lt;td>Foo&lt;/td>
                    &lt;/tr>
                &lt;/table>

                这是另一个普通段落。
            p 请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。
            p HTML 的区段（行内）标签如 &lt;span>、&lt;cite>、&lt;del> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;a> 或 &lt;img> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。
            p 和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。
            h5 特殊字符自动转换
            p 在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 & 。 &lt; 符号用于起始标签，& 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。
            p & 字符尤其让网络文档编写者受折磨，如果你要打「AT&T」 ，你必须要写成「AT&amp;T」。而网址中的 & 字符也要转换。比如你要链接到：
            pre http://images.google.com/images?num=30&q=larry+bird
            p 你必须要把网址转换写为：
            pre http://images.google.com/images?num=30&amp;q=larry+bird
            p 才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。
            p Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 & 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。
            p 所以你如果要在文档中插入一个版权符号 ©，你可以这样写：
            pre &copy;
            p Markdown 会保留它不动。而若你写：
            pre AT&T
            p Markdown 就会将它转为：
            pre AT&&amp;T
            p 类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：
            pre 4 &lt; 5
            p Markdown 将会把它转换为：
            pre 4 &lt; 5
            p 不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 & 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 & 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）

            h4 区块元素
            h5 段落和换行
            p 一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。
            p 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;br /> 标签。
            p 如果你确实想要依赖 Markdown 来插入 &lt;br /> 标签的话，在插入处先按入两个以上的空格然后回车。
            p 的确，需要多费点事（多加空格）来产生 &lt;br /> ，但是简单地「每个换行都转换为 &lt;br />」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。
            h5 标题
            p Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。
            p 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：
            pre.
                This is [an example](http://example.com/ "Title") inline link.

                [This link](http://example.net/) has no title attribute.
            p 会产生：
            pre.
                &lt;p>This is &lt;a href="http://example.com/" title="Title">
                an example&lt;/a> inline link.&lt;/p>

                &lt;p>&lt;a href="http://example.net/">This link&lt;/a> has no
                title attribute.&lt;/p>
            p 如果你是要链接到同样主机的资源，你可以使用相对路径：
            pre See my [About](/about/) page for details.
            p 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：
            pre This is [an example][id] reference-style link.
            p 你也可以选择性地在两个方括号中间加上一个空格：
            pre This is [an example] [id] reference-style link.
            p 接着，在文件的任意处，你可以把这个标记的链接内容定义出来：
            pre [id]: http://example.com/  "Optional Title Here"
            p 链接内容定义的形式为：
            ul
                li 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字
                li 接着一个冒号
                li 接着一个以上的空格或制表符
                li 接着一个以上的空格或制表符
            p 下面这三种链接的定义都是相同：
            pre.
                [foo]: http://example.com/  "Optional Title Here"
                [foo]: http://example.com/  'Optional Title Here'
                [foo]: http://example.com/  (Optional Title Here)
            p 请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。
            p 链接网址也可以用方括号包起来：
            pre [id]: &lt;http://example.com/>  "Optional Title Here"
            p 你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：
            pre.
                [id]: http://example.com/longish/path/to/resource/here
                    "Optional Title Here"
            p 网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。
            p 链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：
            pre.
                [link text][a]
                [link text][A]
            p 隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 "Google" 链接到 google.com，你可以简化成：
            pre [Google][]
            p 然后定义链接内容：
            pre [Google]: http://google.com/
            p 由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：
            pre Visit [Daring Fireball][] for more information.
            p 然后接着定义链接：
            pre [Daring Fireball]: http://daringfireball.net/
            p 链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。
            p 下面是一个参考式链接的范例：
            pre.
                I get 10 times more traffic from [Google] [1] than from
                [Yahoo] [2] or [MSN] [3].

                  [1]: http://google.com/        "Google"
                  [2]: http://search.yahoo.com/  "Yahoo Search"
                  [3]: http://search.msn.com/    "MSN Search"
            p 如果改成用链接名称的方式写：
            pre.
                I get 10 times more traffic from [Google][] than from
                [Yahoo][] or [MSN][].

                  [google]: http://google.com/        "Google"
                  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
                  [msn]:    http://search.msn.com/    "MSN Search"
            p 上面两种写法都会产生下面的 HTML。
            pre.
                &lt;p>I get 10 times more traffic from &lt;a href="http://google.com/"
                title="Google">Google&lt;/a> than from
                &lt;a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo&lt;/a>
                or &lt;a href="http://search.msn.com/" title="MSN Search">MSN&lt;/a>.&lt;/p>
            p 下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：
            pre.
                I get 10 times more traffic from [Google](http://google.com/ "Google")
                than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
                [MSN](http://search.msn.com/ "MSN Search").
            p 参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。
            p 使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。
            h5 强调
            p Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong>，例如：
            pre.
                *single asterisks*

                _single underscores_

                **double asterisks**

                __double underscores__
            p 会转成：
            pre.
                &lt;em>single asterisks&lt;/em>

                &lt;em>single underscores&lt;/em>

                &lt;strong>double asterisks&lt;/strong>

                &lt;strong>double underscores&lt;/strong>
            p 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。
            p 强调也可以直接插在文字中间：
            pre un*frigging*believable
            p 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。
            p 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：
            pre \*this text is surrounded by literal asterisks\*
            h5 代码
            p 如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：
            pre Use the `printf()` function.
            p 会产生：
            pre &lt;p>Use the &lt;code>printf()&lt;/code> function.&lt;/p>
            p 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：
            pre ``There is a literal backtick (`) here.``
            p 这段语法会产生：
            pre &lt;p>&lt;code>There is a literal backtick (`) here.&lt;/code>&lt;/p>
            p 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：
            pre.
                A single backtick in a code span: `` ` ``

                A backtick-delimited string in a code span: `` `foo` ``
            p 会产生：
            pre.
                &lt;p>A single backtick in a code span: &lt;code>`&lt;/code>&lt;/p>

                &lt;p>A backtick-delimited string in a code span: &lt;code>`foo`&lt;/code>&lt;/p>
            p 在代码区段内，& 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：
            pre Please don't use any `&lt;blink>` tags.
            p 转为：
            pre &lt;p>Please don't use any &lt;code>&lt;blink&gt;&lt;/code> tags.&lt;/p>
            p 你也可以这样写：
            pre `&#8212;` is the decimal-encoded equivalent of `&mdash;`.
            p 以产生：
            pre.
                &lt;p>&lt;code>&amp;#8212;&lt;/code> is the decimal-encoded
                equivalent of &lt;code>&amp;mdash;&lt;/code>.&lt;/p>
            h5 图片
            p 很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。
            p Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。
            p 行内式的图片语法看起来像是：
            pre.
                ![Alt text](/path/to/img.jpg)

                ![Alt text](/path/to/img.jpg "Optional title")
            p 详细叙述如下：
            ul
                li 一个惊叹号 !
                li 接着一个方括号，里面放上图片的替代文字
                li 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。
            p 参考式的图片语法则长得像这样：
            pre ![Alt text][id]
            p 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：
            pre [id]: url/to/image  "Optional title attribute"
            p 到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 &lt;img> 标签。

            h4 其他
            h5 自动链接
            p Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：
            pre &lt;http://example.com/>
            p Markdown 会转为：
            pre &lt;a href="http://example.com/">http://example.com/&lt;/a>
            p 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：
            pre &lt;address@example.com>
            p Markdown 会转成：
            pre.
                &lt;a href="&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;
                &#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;
                &#109;">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;
                &#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;&lt;/a>
            p 在浏览器里面，这段字串（其实是 &lt;a href="mailto:address@example.com">address@example.com&lt;/a>）会变成一个可以点击的「address@example.com」链接。
            p （这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）
            h5 反斜杠
            p Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 &lt;em> 标签），你可以在星号的前面加上反斜杠：
            pre \*literal asterisks\*
            p Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：
            pre.
                \   反斜线
                `   反引号
                *   星号
                _   底线
                {}  花括号
                []  方括号
                ()  括弧
                #   井字号
                +   加号
                -   减号
                .   英文句点
                !   惊叹号
    include ../fix-bar
    include ../footer
